"""
Django settings for ja-shortener project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

import decouple

from django.urls import reverse_lazy
from django.templatetags.static import static
from dj_database_url import parse as parse_db_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = decouple.config('SECRET_KEY', default='7dfbc1e6b896492da9cd5ac4b77c11f3167d096998124cfba89e695daebd1047')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = decouple.config('DEBUG', default=False, cast=bool)

if origins := decouple.config('CSRF_TRUSTED_ORIGINS', default='http://localhost'):
    CSRF_TRUSTED_ORIGINS = origins.split(',')
else:
    CSRF_TRUSTED_ORIGINS = []

ALLOWED_HOSTS = decouple.config('ALLOWED_HOSTS', default='*', cast=list)

# Application definition

INSTALLED_APPS = [
    # Custom admin
    "ja_admin",

    # Unfold
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Our apps
    'shortener',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ja_settings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [Path(BASE_DIR) / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ja_settings.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASE_URL = decouple.config('DATABASE_URL', default=None)

if DATABASE_URL is None:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': decouple.config('DATABASE_URL', cast=parse_db_url)
    }

# Redis configuration
REDIS_URL = decouple.config('REDIS_URL', default=None)

if REDIS_URL is None:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }
else:
    CACHES = {
        'default': {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            'LOCATION': REDIS_URL,
        },
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-es'
TIME_ZONE = 'Europe/Madrid'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = Path(BASE_DIR) / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------------------------------------------------------
# Sentry settings
# -------------------------------------------------------------------------
if sentry := decouple.config('SENTRY_DSN', default=None):
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    
    sentry_sdk.init(
        dsn=decouple.config('SENTRY_DSN', default=None),
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
    )

# -------------------------------------------------------------------------
# Unfold settings: settings el tema de Django Admin: https://unfoldadmin.com/
# -------------------------------------------------------------------------
ADMIN_URL = decouple.config('ADMIN_URL', default='admin/')

# ICONS CAN BE FOUND AT: https://fonts.google.com/icons
UNFOLD = {
    "SITE_TITLE": "Ja Shortener",
    "SITE_HEADER": "Ja Shortener",
    "ENVIRONMENT": "ja_admin.unfold_callbacks.environment_callback",
    # "SITE_LOGO": {
    #     "light": lambda request: static('ja_admin/logo.png'),
    #     "dark": lambda request: static('ja_admin/logo.png'),
    # },
    "DASHBOARD_CALLBACK": "ja_admin.unfold_callbacks.dashboard_callback",
    "SIDEBAR": {
        "navigation": [
            {
                "title": "Ja Shortener",
                "separator": True,
                "items": [
                    {
                        "title": "URLs",
                        "link": reverse_lazy("admin:shortener_shorturl_changelist"),
                        "icon": "link",
                    },
                    {
                        "title": "Users",
                        "link": reverse_lazy("admin:auth_user_changelist"),
                        "icon": "person",
                        "permission": lambda request: request.user.is_superuser,
                    }
                ]
            }
        ]
    },
}

ENABLE_VISITS_TRACKING = decouple.config('ENABLE_VISITS_TRACKING', default=True, cast=bool)

# Enable backup configuration
ENABLE_BACKUP = decouple.config('ENABLE_BACKUP', default=False, cast=bool)

# Backup configuration
if ENABLE_BACKUP:
    INSTALLED_APPS += [
        'dbbackup'
    ]

    # Backup type
    BACKUP_TYPE = decouple.config('BACKUP_TYPE', default='s3')

    if BACKUP_TYPE == 's3':
        DBBACKUP_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        DBBACKUP_STORAGE_OPTIONS = {
            'access_key': decouple.config('BACKUP_ACCESS_KEY', default=None),
            'secret_key': decouple.config('BACKUP_SECRET_KEY', default=None),
            'bucket_name': decouple.config('BACKUP_BUCKET_NAME', default=None),
            'default_acl': decouple.config('BACKUP_DEFAULT_ACL', default='private'),
            'region_name': decouple.config('BACKUP_REGION', default=None),
            'endpoint_url': decouple.config('BACKUP_ENDPOINT_URL', default=None),
        }

    if BACKUP_TYPE == 'local':
        DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
        DBBACKUP_STORAGE_OPTIONS = {
            'location': decouple.config('BACKUP_LOCATION', default='/data/backups'),
        }

    else:
        raise ValueError(f"Invalid backup type: {BACKUP_TYPE}. Valid options are: s3, local")